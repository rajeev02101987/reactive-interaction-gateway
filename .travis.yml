stages:
  - unittest
  - exampletest
  - name: dockerbuild
    if: branch = arm64
  - name: website
    if: branch = arm64 AND type != pull_request
  - name: sourcedocs
    if: branch = arm64 AND type != pull_request

.elixir-env: &elixir-env
  language: elixir
  elixir: "1.10"
  otp_release: "22.0.5"

jobs:
  include:
    - stage: unittest
      arch: arm64
      <<: *elixir-env
      env:
        - MIX_ENV=test
      script:
        - mix test
        - mix credo --ignore-checks Design
    - stage: exampletest
      arch: arm64
      language: node_js
      node_js:
        - "10"
      addons:
        apt:
          packages:
            - libgconf-2-4
      cache:
        npm: true
        directories:
          - ~/.cache
      script:
        - cd examples/tests
        - npm ci
        - npm run cypress:run:all
    - stage: dockerbuild
      arch: arm64
      language: minimal
      services:
        - docker
      script:
        - docker build .
    - stage: website
      arch: arm64
      language: node_js
      node_js:
        - "8"
      cache:
        yarn: true
      script:
        - git config --global user.name "${GH_NAME}"
        - git config --global user.email "${GH_EMAIL}"
        - echo "machine github.com login ${GH_NAME} password ${GH_TOKEN}" > ~/.netrc
        - cd website && yarn install && GIT_USER="${GH_NAME}" yarn run publish-gh-pages
    - stage: sourcedocs
      arch: arm64
      <<: *elixir-env
      script:
        - git config --global user.name "${GH_NAME}"
        - git config --global user.email "${GH_EMAIL}"
        - echo "machine github.com login ${GH_NAME} password ${GH_TOKEN}" > ~/.netrc
        - GIT_USER="${GH_NAME}" mix publish_gh_pages
